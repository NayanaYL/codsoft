import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset
ratings_url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.data'
movies_url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.item'

ratings = pd.read_csv(ratings_url, sep='\t', names=['user_id', 'item_id', 'rating', 'timestamp'])
movies = pd.read_csv(movies_url, sep='|', encoding='latin-1', names=['item_id', 'movie_title'] + [str(i) for i in range(22)])

# Merge datasets
data = pd.merge(ratings, movies[['item_id', 'movie_title']], on='item_id')
data = data.drop('timestamp', axis=1)

# Create a user-item matrix
user_movie_matrix = data.pivot_table(index='user_id', columns='movie_title', values='rating')

# Calculate similarity between users
user_similarity = cosine_similarity(user_movie_matrix.fillna(0))
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

def get_recommendations(user_id, num_recommendations=5):
    # Get similar users
    similar_users = user_similarity_df[user_id].sort_values(ascending=False).index[1:num_recommendations+1]

    # Get movie ratings from similar users
    similar_users_ratings = user_movie_matrix.loc[similar_users]

    # Calculate average ratings for each movie
    avg_ratings = similar_users_ratings.mean(axis=0)

    # Get movies already rated by the user
    user_rated_movies = user_movie_matrix.loc[user_id].dropna().index

    # Exclude movies already rated by the user
    recommendations = avg_ratings.drop(user_rated_movies).sort_values(ascending=False).head(num_recommendations)

    return recommendations

# Example usage:
user_id = 1
recommendations = get_recommendations(user_id)
print("Top recommendations for user {}: \n{}".format(user_id, recommendations))
